receiving_energy <- cbind(Student = ties_data[[student_column]], receiving_energy)
# Replace NA with 0 in each tie table
problem_solving[is.na(problem_solving)] <- 0
advice_seeking[is.na(advice_seeking)] <- 0
socialization[is.na(socialization)] <- 0
receiving_energy[is.na(receiving_energy)] <- 0
# Replace UINs with full names in each tie-type table
problem_solving$Student <- student_info$Full_Name[match(problem_solving$Student, student_info$UIN)]
advice_seeking$Student <- student_info$Full_Name[match(advice_seeking$Student, student_info$UIN)]
socialization$Student <- student_info$Full_Name[match(socialization$Student, student_info$UIN)]
receiving_energy$Student <- student_info$Full_Name[match(receiving_energy$Student, student_info$UIN)]
# Define desired order based on target names
desired_order <- target_names
# Check whther they are the same !!
all(desired_order %in% extracted_names[1:32])
# Function to rearrange matrix to match desired order
rearrange_matrix <- function(data, desired_order) {
data <- data %>%
filter(Student %in% desired_order) %>%
arrange(match(Student, desired_order))
data <- data %>% select(Student, all_of(desired_order))
missing_students <- setdiff(desired_order, data$Student)
for (student in missing_students) {
data <- add_row(data, Student = student, .before = match(student, desired_order))
}
data[is.na(data)] <- 0
return(data)
}
# Rearrange each matrix
problem_solving <- rearrange_matrix(problem_solving, desired_order)
advice_seeking <- rearrange_matrix(advice_seeking, desired_order)
socialization <- rearrange_matrix(socialization, desired_order)
receiving_energy <- rearrange_matrix(receiving_energy, desired_order)
# Initialize workbook
wb <- createWorkbook()
# Define the student identifier column and select columns for "Leadership Emergence"
ties_data_leadership <- data %>% select(student_column, 37:68)
ties_data_leadership <- ties_data_leadership[-1, ]
leadership_emergence <- as.data.frame(ties_data_leadership)
leadership_emergence <- cbind(Student = ties_data[[student_column]], leadership_emergence)
leadership_emergence[is.na(leadership_emergence)] <- 0
leadership_emergence$Student <- student_info$Full_Name[match(leadership_emergence$Student, student_info$UIN)]
leadership_emergence <- leadership_emergence[,-2]
leadership_emergence <- rearrange_matrix(leadership_emergence, desired_order)
leadership_emergence[-1] <- lapply(leadership_emergence[-1], as.numeric)
# Define a function to remove self-designations
remove_self_designations <- function(data) {
for (i in 1:nrow(data)) {
student_name <- data$Student[i]
if (student_name %in% colnames(data)) {
data[i, student_name] <- 0
}
}
return(data)
}
# Apply the function to each tie-type table and leadership emergence table
problem_solving <- remove_self_designations(problem_solving)
advice_seeking <- remove_self_designations(advice_seeking)
socialization <- remove_self_designations(socialization)
receiving_energy <- remove_self_designations(receiving_energy)
leadership_emergence <- remove_self_designations(leadership_emergence)
# Prepare the Attribute table
questionnaire_data <- data %>% select(Q2, Q34_1:Q34_16, Q35_1:Q35_5)
questionnaire_data <- questionnaire_data[-1,]
colnames(questionnaire_data)[colnames(questionnaire_data) == "Q2"] <- "Student"
questionnaire_data[-1] <- lapply(questionnaire_data[-1], as.numeric)
questionnaire_data <- questionnaire_data %>%
rowwise() %>%
mutate(
Sum_Q34 = sum(c_across(Q34_1:Q34_16), na.rm = TRUE),
Sum_Q35 = sum(c_across(Q35_1:Q35_5), na.rm = TRUE)
) %>%
ungroup() %>%
rename(
Growth_Mindset = Sum_Q35,
Emotional_Intelligence = Sum_Q34
)
questionnaire_data$Student <- student_info$Full_Name[match(questionnaire_data$Student, student_info$UIN)]
questionnaire_data <- as.data.frame(questionnaire_data)
questionnaire_data <- data.frame(Student = desired_order) %>%
left_join(questionnaire_data, by = "Student") %>%
mutate(across(c(Growth_Mindset, Emotional_Intelligence), ~ replace_na(., 0)))
questionnaire_data$Gender <- ifelse(student_info$Gender[31:62] == "M", 1, 0)
# Generate anonymous IDs
set.seed(123)
anonymized_ids <- sprintf("%09d", sample(1e8:1e9 - 1, length(desired_order), replace = FALSE))
colnames(problem_solving)[-1] <- anonymized_ids
colnames(advice_seeking)[-1] <- anonymized_ids
colnames(socialization)[-1] <- anonymized_ids
colnames(receiving_energy)[-1] <- anonymized_ids
colnames(leadership_emergence)[-1] <- anonymized_ids
# colnames(questionnaire_data) <- c("Student", "Growth_Mindset", "Emotional_Intelligence", "Gender")
questionnaire_data$Student <- anonymized_ids
problem_solving$Student <- anonymized_ids
advice_seeking$Student <- anonymized_ids
socialization$Student <- anonymized_ids
receiving_energy$Student <- anonymized_ids
leadership_emergence$Student <- anonymized_ids
# Add each table to the workbook
addWorksheet(wb, "problem_solving")
writeData(wb, "problem_solving", problem_solving)
addWorksheet(wb, "advice_seeking")
writeData(wb, "advice_seeking", advice_seeking)
addWorksheet(wb, "socialization")
writeData(wb, "socialization", socialization)
addWorksheet(wb, "receiving_energy")
writeData(wb, "receiving_energy", receiving_energy)
addWorksheet(wb, "leadership_emergence")
writeData(wb, "leadership_emergence", leadership_emergence)
addWorksheet(wb, "Attribute")
writeData(wb, "Attribute", questionnaire_data)
## SAVE AND FINISH!!!!!!
saveWorkbook(wb, "Responses_Final.xlsx", overwrite = TRUE)
{
library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(xUCINET)
library(sna)
library(igraph)
library(ggplot2)
library(sna)
library(mediation)
library(lm.beta)
library(xlsx)
library(ergm)
}
# Remove all objects from the workspace
# rm(list = ls())
{
# Convert the data frames to numeric matrices, excluding the first column
pb <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="problem_solving"))[,-1], 2, as.numeric)
ad <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="advice_seeking"))[,-1], 2, as.numeric)
sc <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="socialization"))[,-1], 2, as.numeric)
en <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="receiving_energy"))[,-1], 2, as.numeric)
le <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="leadership_emergence"))[,-1], 2, as.numeric)
# Make Attribute Data
at <- read_excel("Responses_Final.xlsx", sheet="Attribute")
at <- at[, (ncol(at)-2):ncol(at)]
at$response <- ifelse(at$Growth_Mindset == 0 & at$Emotional_Intelligence == 0, 0, 1)
# at$EI_cent <- scale(at$Emotional_Intelligence)[,1]
# at$GM_cent <- scale(at$Growth_Mindset)[,1]
## advice sending: original data from Qualtrics
# ad_s <- (apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="advice_seeking"))[,-1], 2, as.numeric))
## Removing non-response data
{
keep_idx <- which(at$response == 1)
at_filtered <- at[keep_idx, ]
pb_filtered <- pb[keep_idx, keep_idx]
ad_filtered <- ad[keep_idx, keep_idx]
sc_filtered <- sc[keep_idx, keep_idx]
en_filtered <- en[keep_idx, keep_idx]
le_filtered <- le[keep_idx, keep_idx]
pb <- pb_filtered
ad <- ad_filtered
sc <- sc_filtered
en <- en_filtered
le <- le_filtered
at <- at_filtered
rm(ad_filtered, at_filtered, en_filtered, le_filtered, pb_filtered, sc_filtered)
}
# # Fill NA with non response data
# {
# na_idx <- which(at$response == 0)
# pb[na_idx, ] <- NA
# pb[, na_idx] <- NA
# ad[na_idx, ] <- NA
# ad[, na_idx] <- NA
# sc[na_idx, ] <- NA
# sc[, na_idx] <- NA
# en[na_idx, ] <- NA
# en[, na_idx] <- NA
# le[na_idx, ] <- NA
# le[, na_idx] <- NA
# }
## Column name from anonymized to 1:32
colnames(pb) <- 1:nrow(pb)
colnames(ad) <- 1:nrow(ad)
colnames(sc) <- 1:nrow(sc)
colnames(en) <- 1:nrow(en)
# colnames(ad_s) <- 1:32
colnames(le) <- 1:nrow(le)
rownames(pb) <- 1:nrow(pb)
rownames(ad) <- 1:nrow(ad)
rownames(sc) <- 1:nrow(sc)
rownames(en) <- 1:nrow(en)
# rownames(ad_s) <- 1:32
rownames(le) <- 1:nrow(le)
# Sum each column of the 'le' dataframe --> leadership emergence
at$le <- colSums(le, na.rm = TRUE)
at$pb <- colSums(pb, na.rm = TRUE)
at$ad <- colSums(ad, na.rm = TRUE)
at$sc <- colSums(sc, na.rm = TRUE)
at$en <- colSums(en, na.rm = TRUE)
# at$ad_s <- colSums(ad_s, na.rm = TRUE)
## Yule's Q: I chose Yule's Q than EI since Female:Male = 19:13 (60%:40%)
at$YulesQ_pb <- xEgoAlterSimilarityCat(pb, at$Gender)[,11]
at$YulesQ_ad <- xEgoAlterSimilarityCat(ad, at$Gender)[,11]
at$YulesQ_sc <- xEgoAlterSimilarityCat(sc, at$Gender)[,11]
at$YulesQ_en <- xEgoAlterSimilarityCat(en, at$Gender)[,11]
# xEgoAlterSimilarityCat(xTranspose(pb), at$Gender) ## to check whether transpose
# EI_pb <- xEgoAlterSimilarityCat(pb, at$Gender)[,8]
## BETWEENNESS CENTRALITY (before Centering)
at$pb_bw_b <- xBetweennessCentrality(pb)[,2]
at$ad_bw_b <- xBetweennessCentrality(ad)[,2]
at$sc_bw_b <- xBetweennessCentrality(sc)[,2]
at$en_bw_b <- xBetweennessCentrality(en)[,2]
# at$ad_s_bw_b <- xBetweennessCentrality(ad_s)[,2]
## EIGENVECTOR CENTALITY
at$pb_ei_b <- xEigenvectorCentrality(pb)[,2]
at$ad_ei_b <- xEigenvectorCentrality(ad)[,2]
at$sc_ei_b <- xEigenvectorCentrality(sc)[,2]
at$en_ei_b <- xEigenvectorCentrality(en)[,2]
# at$ad_s_ei_b <- xEigenvectorCentrality(ad_s)[,2]
## CLOSENESS CENTALITY
at$pb_cl_b <- xClosenessCentrality(pb)[,2]
at$ad_cl_b <- xClosenessCentrality(ad)[,2]
at$sc_cl_b <- xClosenessCentrality(sc)[,2]
at$en_cl_b <- xClosenessCentrality(en)[,2]
# at$ad_s_cl_b <- xClosenessCentrality(ad_s)[,2]
## Centering
at$pb_bw <- scale(at$pb_bw_b)[,1]
at$ad_bw <- scale(at$ad_bw_b)[,1]
at$sc_bw <- scale(at$sc_bw_b)[,1]
at$en_bw <- scale(at$en_bw_b)[,1]
at$pb_ei <- scale(at$pb_ei_b)[,1]
at$ad_ei <- scale(at$ad_ei_b)[,1]
at$sc_ei <- scale(at$sc_ei_b)[,1]
at$en_ei <- scale(at$en_ei_b)[,1]
# at$ad_s_ei <- scale(at$ad_s_ei_b)[,1]
at$pb_cl <- scale(at$pb_cl_b)[,1]
at$ad_cl <- scale(at$ad_cl_b)[,1]
at$sc_cl <- scale(at$sc_cl_b)[,1]
at$en_cl <- scale(at$en_cl_b)[,1]
# at$ad_s_cl <- scale(at$ad_s_cl_b)[,1]
at$le_cent <- scale(at$le)[,1]
# Gender, GM, EI Matrice
gender_matrix <- outer(at$Gender, at$Gender, function(x, y) as.integer(x == y))
diag(gender_matrix) <- 0
GM_diff <- outer(at$Growth_Mindset, at$Growth_Mindset, FUN = function(i, j) i - j)  # i = sender, j = receiver
EI_diff <- outer(at$Emotional_Intelligence, at$Emotional_Intelligence, FUN = function(i, j) i - j)  # i = sender, j = receiver
}
View(at)
# For ERGM
{
le_ergm <-as.network(le, directed = TRUE)
le_ergm %v% "gender" <-at$Gender
le_ergm %v% "GM" <- at$Growth_Mindset
le_ergm %v% "EI" <- at$Emotional_Intelligence
pb_ergm <-as.network(pb, directed = TRUE)
pb_ergm %v% "gender" <-at$Gender
pb_ergm %v% "GM" <- at$Growth_Mindset
pb_ergm %v% "EI" <- at$Emotional_Intelligence
ad_ergm <-as.network(ad, directed = TRUE)
ad_ergm %v% "gender" <-at$Gender
ad_ergm %v% "GM" <- at$Growth_Mindset
ad_ergm %v% "EI" <- at$Emotional_Intelligence
sc_ergm <-as.network(sc, directed = TRUE)
sc_ergm %v% "gender" <-at$Gender
sc_ergm %v% "GM" <- at$Growth_Mindset
sc_ergm %v% "EI" <- at$Emotional_Intelligence
en_ergm <-as.network(en, directed = TRUE)
en_ergm %v% "gender" <-at$Gender
en_ergm %v% "GM" <- at$Growth_Mindset
en_ergm %v% "EI" <- at$Emotional_Intelligence
}
## ERGM
summary(ergm(le_ergm ~ edges +
# mutual + nodefactor("gender", levels = 2) + nodematch("gender") +
edgecov(GM_diff) + nodeicov("GM") +
edgecov(pb_ergm) + edgecov(ad_ergm) + edgecov(sc_ergm) + edgecov(en_ergm) +
gwidegree(0.8, fixed = TRUE) +
dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
edgecov(EI_diff) + nodeicov("EI")
# nodeicov("GM") + nodeocov("GM") + # https://www.rdocumentation.org/packages/ergm/versions/4.8.1/topics/nodecov-ergmTerm
# nodeicov("EI") + nodeocov("EI") + # https://www.rdocumentation.org/packages/ergm/versions/4.8.1/topics/nodecov-ergmTerm
))
summary(ergm(pb_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
gwidegree(0.8, fixed = TRUE) +
dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
summary(ergm(ad_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
gwidegree(0.8, fixed = TRUE) +
dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
summary(ergm(sc_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
# gwidegree(0.8, fixed = TRUE) +
# dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
# dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
summary(ergm(en_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
# gwidegree(0.8, fixed = TRUE) +
# dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
# dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
summary(ergm(en_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
# gwidegree(0.8, fixed = TRUE) +
dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
# dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
summary(ergm(en_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
# gwidegree(0.8, fixed = TRUE) +
# dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
summary(ergm(en_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
gwidegree(0.8, fixed = TRUE) +
# dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
# dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
{
library(readxl)
library(dplyr)
library(tidyr)
library(openxlsx)
library(xUCINET)
library(sna)
library(igraph)
library(ggplot2)
library(sna)
library(mediation)
library(lm.beta)
library(xlsx)
library(ergm)
}
# Remove all objects from the workspace
# rm(list = ls())
{
# Convert the data frames to numeric matrices, excluding the first column
pb <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="problem_solving"))[,-1], 2, as.numeric)
ad <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="advice_seeking"))[,-1], 2, as.numeric)
sc <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="socialization"))[,-1], 2, as.numeric)
en <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="receiving_energy"))[,-1], 2, as.numeric)
le <- apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="leadership_emergence"))[,-1], 2, as.numeric)
# Make Attribute Data
at <- read_excel("Responses_Final.xlsx", sheet="Attribute")
at <- at[, (ncol(at)-2):ncol(at)]
at$response <- ifelse(at$Growth_Mindset == 0 & at$Emotional_Intelligence == 0, 0, 1)
# at$EI_cent <- scale(at$Emotional_Intelligence)[,1]
# at$GM_cent <- scale(at$Growth_Mindset)[,1]
## advice sending: original data from Qualtrics
# ad_s <- (apply(as.matrix(read_excel("Responses_Final.xlsx", sheet="advice_seeking"))[,-1], 2, as.numeric))
## Removing non-response data
{
keep_idx <- which(at$response == 1)
at_filtered <- at[keep_idx, ]
pb_filtered <- pb[keep_idx, keep_idx]
ad_filtered <- ad[keep_idx, keep_idx]
sc_filtered <- sc[keep_idx, keep_idx]
en_filtered <- en[keep_idx, keep_idx]
le_filtered <- le[keep_idx, keep_idx]
pb <- pb_filtered
ad <- ad_filtered
sc <- sc_filtered
en <- en_filtered
le <- le_filtered
at <- at_filtered
rm(ad_filtered, at_filtered, en_filtered, le_filtered, pb_filtered, sc_filtered)
}
# # Fill NA with non response data
# {
# na_idx <- which(at$response == 0)
# pb[na_idx, ] <- NA
# pb[, na_idx] <- NA
# ad[na_idx, ] <- NA
# ad[, na_idx] <- NA
# sc[na_idx, ] <- NA
# sc[, na_idx] <- NA
# en[na_idx, ] <- NA
# en[, na_idx] <- NA
# le[na_idx, ] <- NA
# le[, na_idx] <- NA
# }
## Column name from anonymized to 1:32
colnames(pb) <- 1:nrow(pb)
colnames(ad) <- 1:nrow(ad)
colnames(sc) <- 1:nrow(sc)
colnames(en) <- 1:nrow(en)
# colnames(ad_s) <- 1:32
colnames(le) <- 1:nrow(le)
rownames(pb) <- 1:nrow(pb)
rownames(ad) <- 1:nrow(ad)
rownames(sc) <- 1:nrow(sc)
rownames(en) <- 1:nrow(en)
# rownames(ad_s) <- 1:32
rownames(le) <- 1:nrow(le)
# Sum each column of the 'le' dataframe --> leadership emergence
at$le <- colSums(le, na.rm = TRUE)
at$pb <- colSums(pb, na.rm = TRUE)
at$ad <- colSums(ad, na.rm = TRUE)
at$sc <- colSums(sc, na.rm = TRUE)
at$en <- colSums(en, na.rm = TRUE)
# at$ad_s <- colSums(ad_s, na.rm = TRUE)
## Yule's Q: I chose Yule's Q than EI since Female:Male = 19:13 (60%:40%)
at$YulesQ_pb <- xEgoAlterSimilarityCat(pb, at$Gender)[,11]
at$YulesQ_ad <- xEgoAlterSimilarityCat(ad, at$Gender)[,11]
at$YulesQ_sc <- xEgoAlterSimilarityCat(sc, at$Gender)[,11]
at$YulesQ_en <- xEgoAlterSimilarityCat(en, at$Gender)[,11]
# xEgoAlterSimilarityCat(xTranspose(pb), at$Gender) ## to check whether transpose
# EI_pb <- xEgoAlterSimilarityCat(pb, at$Gender)[,8]
## BETWEENNESS CENTRALITY (before Centering)
at$pb_bw_b <- xBetweennessCentrality(pb)[,2]
at$ad_bw_b <- xBetweennessCentrality(ad)[,2]
at$sc_bw_b <- xBetweennessCentrality(sc)[,2]
at$en_bw_b <- xBetweennessCentrality(en)[,2]
# at$ad_s_bw_b <- xBetweennessCentrality(ad_s)[,2]
## EIGENVECTOR CENTALITY
at$pb_ei_b <- xEigenvectorCentrality(pb)[,2]
at$ad_ei_b <- xEigenvectorCentrality(ad)[,2]
at$sc_ei_b <- xEigenvectorCentrality(sc)[,2]
at$en_ei_b <- xEigenvectorCentrality(en)[,2]
# at$ad_s_ei_b <- xEigenvectorCentrality(ad_s)[,2]
## CLOSENESS CENTALITY
at$pb_cl_b <- xClosenessCentrality(pb)[,2]
at$ad_cl_b <- xClosenessCentrality(ad)[,2]
at$sc_cl_b <- xClosenessCentrality(sc)[,2]
at$en_cl_b <- xClosenessCentrality(en)[,2]
# at$ad_s_cl_b <- xClosenessCentrality(ad_s)[,2]
## Centering
at$pb_bw <- scale(at$pb_bw_b)[,1]
at$ad_bw <- scale(at$ad_bw_b)[,1]
at$sc_bw <- scale(at$sc_bw_b)[,1]
at$en_bw <- scale(at$en_bw_b)[,1]
at$pb_ei <- scale(at$pb_ei_b)[,1]
at$ad_ei <- scale(at$ad_ei_b)[,1]
at$sc_ei <- scale(at$sc_ei_b)[,1]
at$en_ei <- scale(at$en_ei_b)[,1]
# at$ad_s_ei <- scale(at$ad_s_ei_b)[,1]
at$pb_cl <- scale(at$pb_cl_b)[,1]
at$ad_cl <- scale(at$ad_cl_b)[,1]
at$sc_cl <- scale(at$sc_cl_b)[,1]
at$en_cl <- scale(at$en_cl_b)[,1]
# at$ad_s_cl <- scale(at$ad_s_cl_b)[,1]
at$le_cent <- scale(at$le)[,1]
# Gender, GM, EI Matrice
gender_matrix <- outer(at$Gender, at$Gender, function(x, y) as.integer(x == y))
diag(gender_matrix) <- 0
GM_diff <- outer(at$Growth_Mindset, at$Growth_Mindset, FUN = function(i, j) i - j)  # i = sender, j = receiver
EI_diff <- outer(at$Emotional_Intelligence, at$Emotional_Intelligence, FUN = function(i, j) i - j)  # i = sender, j = receiver
}
# For ERGM
{
le_ergm <-as.network(le, directed = TRUE)
le_ergm %v% "gender" <-at$Gender
le_ergm %v% "GM" <- at$Growth_Mindset
le_ergm %v% "EI" <- at$Emotional_Intelligence
pb_ergm <-as.network(pb, directed = TRUE)
pb_ergm %v% "gender" <-at$Gender
pb_ergm %v% "GM" <- at$Growth_Mindset
pb_ergm %v% "EI" <- at$Emotional_Intelligence
ad_ergm <-as.network(ad, directed = TRUE)
ad_ergm %v% "gender" <-at$Gender
ad_ergm %v% "GM" <- at$Growth_Mindset
ad_ergm %v% "EI" <- at$Emotional_Intelligence
sc_ergm <-as.network(sc, directed = TRUE)
sc_ergm %v% "gender" <-at$Gender
sc_ergm %v% "GM" <- at$Growth_Mindset
sc_ergm %v% "EI" <- at$Emotional_Intelligence
en_ergm <-as.network(en, directed = TRUE)
en_ergm %v% "gender" <-at$Gender
en_ergm %v% "GM" <- at$Growth_Mindset
en_ergm %v% "EI" <- at$Emotional_Intelligence
}
## ERGM
summary(ergm(le_ergm ~ edges +
# mutual + nodefactor("gender", levels = 2) + nodematch("gender") +
edgecov(GM_diff) + nodeicov("GM") +
edgecov(pb_ergm) + edgecov(ad_ergm) + edgecov(sc_ergm) + edgecov(en_ergm) +
gwidegree(0.8, fixed = TRUE) +
dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
edgecov(EI_diff) + nodeicov("EI")
# nodeicov("GM") + nodeocov("GM") + # https://www.rdocumentation.org/packages/ergm/versions/4.8.1/topics/nodecov-ergmTerm
# nodeicov("EI") + nodeocov("EI") + # https://www.rdocumentation.org/packages/ergm/versions/4.8.1/topics/nodecov-ergmTerm
))
summary(ergm(pb_ergm ~ edges + mutual +
edgecov(GM_diff) + edgecov(EI_diff) +
gwidegree(0.8, fixed = TRUE) +
dgwesp(type="OTP", decay = .5, fixed = TRUE) + # Transitivity: a-->b, b-->c, a-->c
dgwesp(type="ITP", decay = .5, fixed = TRUE) + # Cyclicality: a-->b, b-->c, c-->a
nodeicov("GM") + nodeicov("EI") +
nodefactor("gender", levels = 2) + nodematch("gender")))
xQAPCorrelation(GM_diff, le, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(GM_diff, le, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(GM_diff, pb, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(GM_diff, ad, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(GM_diff, sc, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(GM_diff, en, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(EI_diff, le, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(EI_diff, pb, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(EI_diff, ad, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(EI_diff, sc, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(EI_diff, en, NPERM = 1000, Directed = TRUE)[7]
xQAPCorrelation(EI_diff, GM_diff, NPERM = 1000, Directed = TRUE)[7]
